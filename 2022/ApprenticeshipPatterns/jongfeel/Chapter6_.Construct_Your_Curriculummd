# Chapter six Construct Your Curriculum

6장 역시, 책꽃이에 있는 책 그림 밑에 있는 글귀가 너무 좋아 인용한다.

> **He'd no longer be a grade-motivated person. He’d be a knowledge-motivated person. He would need no external pushing to learn. His push would come from the inside.... Motivation of this sort, once it catches hold, is a ferocious force.**

grade-motivated가 아닌 knowledge-motivated 됐다는 게 마음에 든다. 외부의 압박이 아닌 내면에서 부터 압박이 온다는 건 외적인 동기가 아닌 내적인 동기가 생긴다는 뜻으로 이해가 된다.

## 논의할 내용

책, 특히 고전에서 부터 지헤를 얻는 것 역시 마스터 장인에게 가르침을 얻어 장인의 길로 조금씩 나아가자는 걸로 이해가 됩니다. 지금 읽고 있는 책 외에 고전의 반열에 오른 책 중에 좋다고 생각하는 책이 있으면 하나 소개해 보면 어떨까요? 물론 다음에 읽을 생각하는 프로그래밍은 제외입니다 ㅎㅎ

저의 경우 리팩토링이라는 책을 소개해 드리고 싶은데요. 저 역시 고전에서 지혜를 얻기 시작한 게 그리 오래되지 않았습니다. 막 배우기 시작했을 때와 경력이 몇 년 되지 않았을 때만 하더라도 최신 기술에 대한 책을 많이 봤었죠. 재밌는 사실은 그 당시에는 고전에 속하지 않았는데, 지금은 고전... 아니 책이 아니라 그냥 일반적인 프로그래밍의 기술 쯤에 속하는 리팩토링이라는 책입니다. 제가 2002년에 이 책을 접할 때 상당히 신선했었고 코드를 다른 방식으로 짜도 동일한 기능을 하게 하는 기법이 있구나를 알았었는데, 지금은 고전이 되어 버렸네요.

컴공 학부생 3학년이 읽기에는 많이 부담스러운 책이었는데, 하드커버 책이 마음에 들었고 무엇보다도 문법 책이 아니라 진짜 기술에 대한 책이라는 생각에 Efecctive C++ 책과 함께 집-학교를 오가는 지하철에서 부지런히 읽었던 기억도 생생합니다.

## Reading List

배운 것을 공유하라와 마찬가지로 독서 목록을 공유하는 것도 좋음
어떤 책을 언제 읽었는지 구별할 수 있는 정도면 됨.

여기서도 디자인 패턴에 대해 언급하는데, 아주 공감하는 바이다.
왜냐하면 나도 처음에 디자인 패턴 읽고 뭔지 이해가 잘 안됐고, 언제 어떻게 쓰면 좋은지도 애매했기 때문이다.

책을 언제 어떻게 읽을지 적절한 타이밍은 중요하고, 멘토가 그걸 잘 알려줄 수 있다.

실천방안의 내용을 나도 노션에 작성하고 있는데 최근 3년 치의 책 읽은 목록이 공개되어 있다. (물론 그 이전에 읽은 책도 많이 있지만 목록으로 기록해 놓지를 못한게 아쉽다)

https://www.notion.so/jongfeel/Book-eabc6578c2f8472f8efee3be7901d4ae

그리고 곧 notion을 버리고 github에 옮길 생각도 하고 있는 중이다.

## Read Constantly

책의 마지막이 되어 가니까 정말 좋은 분의 좋은 명언이 계속 눈에 들어온다. 스티브 맥코넬의 말을 인용해 본다.

> **If you read even one good programming book every two
months, roughly 35 pages a week, you’ll soon have a firm
grasp on the industry and distinguish yourself from nearly
everyone around you.**

fact)
정말 놀랍게도 Acedemic conference는 2주에 50~80 페이지 분량의 책을 읽고 리뷰하는 걸 진행하고 있다. Adcademic conference를 완주한다면 1년 중 절반은 스티브 맥코넬이 언급한 내용을 실천하고 달성한 셈이 된다. 모두 화이팅!

데이브의 사례와 같이 하루에 1시간 30분이나 되는 기차 안에서 책 읽기에 몰두하는 건 좋은 예제이고 나 역시도 그렇게 하고 있다.

또한 실천 방안으로 다음 책 읽을 목록을 정하는 것인데, 다음 책은 실용주의 프로그래머를 읽을 것이며, 내년에 열릴 academic conference 2023에서 읽을 책 역시 올해 모임이 끝날 때 정할 예정이다.

## Study the Classics

아마 비전공자 출신 30대 개발자는 거의 90% 이상 이 패턴에서 소개한 상황이라고 생각한다.

> 당신은 독학으로 공부했거나 이론보다 기술 훈련을 더 중요시하는 상당히 실무 중심적인 교육을 받았다.

현재 회사에서 진행하는 독서 모임 역시 비전공자 출신이 많으며 잠깐의 부트캠프나 국비 지원 교육을 받고 실무자가 된 케이스이며, 놀랍게도 고전은 커녕 여태까지 관련 책을 읽은게 없는 개발자도 있다.

내가 읽었던 고전 내용 중에 재미있었던 내용은 천공 카드로 메인 프레임 컴퓨터에서 프로그래밍 하던 60년대 개발자들이 지하 메인 프레임 컴퓨터에서 프로그래밍을 한 펀치 카드 뭉치를 수납하는 여직원에게 전달하고 커피 자판기에서 동료 프로그래머와 커피를 마시며 각자 자기가 프로그래밍 했던 코드를 디버깅하면서 대화했다는 이야기였다. 또 대화하다가 코드를 잘못 짠걸 알아버리면, 그 코드 수정을 당장 하지 못하고 내일 다시 펀치 카드를 새로 뚫어서 수정된 코드를 작성하고 다시 지하실의 메인 프레임 컴퓨터의 수납원에게 정해진 시간에 전달 해야 한다는 얘기도 흥미로웠다. 책에서 소개하는 프로그래밍 심리학 책의 펀치카드와 방만한 크기의 컴퓨터 이야기와 일치하는 이야기이다.

고전은 지금의 상황과 많이 다르기 때문에 이질감이 느껴지지만, 그때 부터 만들어진 컴퓨터 지식과 개발자들의 지혜는 결코 다른 것이 아니라고 생각하기에 고전은 틈틈히 읽어 두는게 좋다고 생각한다.

미리 읽어본 패턴이지만 주의사항으로는 고전에 몰두하면 장인정신의 실용적인 지식과 정보를 등한시할 수 있다는 것 정도이다.

실천 방안 중에 소장 도서중에 가장 오래된 책이 무엇이냐는 질문에 2008~2010년에 많은 책을 중고로 팔아버려서 소장하고 있는 책은 2010년 책 부터고, 그 책은 국내 저자 채수원님의 <테스트 주도 개발 TDD 실천법과 도구> 라는 책이고 무려 <함께 자라기>의 김창준님이 추천서도 써준 책이다.

만약 책들을 중고로 팔아버리지 않았다면... 2002년 7월 쯤 초판을 거액을 주고 구매한 마틴 파울러의 <리팩토링>이지 않을까 싶다.

## Dig Deeper

겉핥기 식으로만 배우고 그걸 실무에서 그대로 사용하다가 한계에 부딪칠 수 밖에 없다는 내용.

깊이 파고드는게 어느 수준인지 자세하게 설명해주고 있는데, '모든 것이 뜻이 통하는'수준의 지식을 얻으려는 태도가 생겨난다로 설명하고 있다. 영어로는 make sense of it all로 설명.

또 근본적인 걸 이해하고 설명하기 위해서는 블로그에 정리를 할 것을 권장하고 있다. 그 개념의 맥락을 이해하는게 중요하는 것도 포함되어 있다.

이 패턴을 적용해서 잘 하는 사람이 되면 어려운 과제를 맡게 될 건데 성공하거나 실패한다고 해도 이런 지식을 얻었을 때 거만해 져서는 안된다는 걸 언급한다. 

실천방안의 RFC707을 찾아봤는데, 1974년 ARPANET에서 분산된 리소스를 공유하는 프로토콜에 대한 초안 쯤으로 보인다.

이후 steve vinoski에 대한 정확한 글을 찾아 보려고 했는데 정확한 글의 원문 출처가 뭔지는 모르겠다.

구글에 "steve vinoski rfc707"로 검색해서 나온 첫 링크를 기준으로 해석해 본다.  
https://qconlondon.com/london-2009/qconlondon.com/london-2009/speaker/Steve+Vinoski.html

RFC707에서 시작해서 원격 리소스를 사용하려는 프로토콜로 처음 RPC라는 개념으로 출발해 기술이 발전하면서 분산 개체 프로그래밍과 SOAP라는 웹 서비스가 나오게 됐는데 원래 원격 리소스를 제대로 사용하려는 본질을 흐리고 있다 정도로 이해해 볼 수 있다.

그렇다면 원래 RFC707과 steve vinoski의 글에서 얼마나 깊게 이해하고 있는지에 대한 질문의 수준을 파악해 보자면

내가 얼마나 네트워크에 대한 이해를 하고 있는지와 서버의 end point 호출에 대해 기반 프로토콜 지식에 대해 얼마나 모르고 있는지 깨달아 보라는 내용으로 파악이 된다.

의견)
네트워크 프로그래밍 잘 모르거나 안해본 사람은 설명은 커녕 무슨 얘기부터 해야할지 모를게 확실함

## Familiar Tools

익숙한 도구들이 편해진다는 건 양면성을 가진다.

생산성이 높아진다는 측면에서는 유익하지만, 어떤 문제라도 해결할 수 있는 도깨비 방망이로 여기기 시작한다. (도꺠비 방망이로 해석된 원문을 찾아 보니 "golden hammer"로 되어 있음, 뭐든지 한 가지 도구로 해결하려는 자세를 뜻하는 말)

중간에 에릭 호퍼의 말도 너무 인상적이어서 인용해 본다.

> *In a time of drastic change it is the learners who inherit the future. The learned usually find
themselves equipped to live in a world that no longer exists.*

의견1, TMI 주의)
사실 이 패턴에서 할 얘기가 아주 많다. 익숙한 걸 버리지 못하는 사람들에 대한 이야기인데 크게 두 가지이다.

첫번째는, 웹 서비스를 개발하는데 java+spring만을 언급하고 나머지는 쓸데 없는 잡기술로 취급하는 사람들. Java라는 고귀한(?) 언어에 도취되어 있는 사람들이며 spring에 포함되어 있는 여러 편리한 패턴과 도구들 DI, IoC Bean, JPA 등이 보편화 되어 있는데 모르고 있는 너희들이 불쌍한 개발자 쯤으로 취급한다. 또 한국에서 많이 쓰는 서버 프레임워크이자 가장 많은 개발자가 있다는 걸로 java+srping 조합으로 할 수 밖에 없지 않냐라고 주장하는 사람들이다. 그들의 말은 대세와 다수결의 원칙에 따라 자기들이 정의롭고 맞다고 주장하는 사람들로 보인다.

두번째는, jenkins의 편리한 세팅과 많은 레퍼런스를 역시 버리지 못하고 뭔가 devops라는 단어만 나오면 반사적으로 jenkins를 언급하고 강제적으로 이거 안쓰면 devops에 대해서 아무것도 모르는 바보 취급하는 사람들 역시 피곤하기만 하다. 상용 툴인 TeamCity나 최근 2~3년간 인기를 끌고 있는 Github action 쯤은 jenkins 아류 쯤으로 생각하고 정 쓰고 싶으면 다른 프로젝트 할 때 가볍게 써보라는 정도로 취급한다. 그리고 매우 special 하게도 첫번째의 java+spring만 아는 사람이 주로 jenkins만을 언급하는 건 느낌 적인 느낌은 아니라고 본다.

의견2)
책에 언급한 대로 경력이 성공적이려면, 익숙한 도구들을 쉽게 얻고 쉽게 버리는 법을 배우라고 나와 있다.

나 역시도 처음에 썼던 익숙한 도구들을 나열해 보면  
Visual Studio 6.0, MFC, Visual Assist X, Team Foundation Server, Samba, Ultra edit, WinMerge 등이다.

지금은 아무도 쓰지 않는 역사 속의 유물이며, 나 역시 불과 십 몇년 전만 하더라도 즐겨쓰던 도구들인데 이미 버린지 오래 됐다. 

이 외에도 버린 툴과 배웠던 신기술들이 너무 많다. 하지만 쓰던 도구에 익숙해 지면 소프트웨어 전체를 보는 시야가 좁아지는 것 역시 동의하므로 아쉬움 역시 없다.

## Wrapping Up
